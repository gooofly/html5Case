extends ./partials/layout.jade

block content
  h2 History API

  //- #exhibit You are at the Zoom entrance.
  //- button#btnNextExhibit Visit the Meerkats

  // image view and title - set to first image
  #imgView.imgView
    img#imgSlide(src='http://gooofly.qiniudn.com/FEI_2298.JPG')
  #imageInfo Image FEI_2298.JPG

  // thumbnail image row
  #imgRow.imgRow

  // history state dispaly area - set to first image (page when loaded)
  #stateInfo Image FEI_2298.JPG

  hr

  button#btnNextState Replace State
  #stateInfo2

  hr

  #stateInfo3 

  hr

  // slide image and title
  #slide(style='height:300px')
    img#imgSlide4(src='http://gooofly.qiniudn.com/FEI_2298.JPG' style='height: 100%')
  #slideInfo Slide FEI_2298

  // slide options
  input#chkBorder(type='checkbox')
  | Border
  br
  | Note:
  input#txtNote(type='text' value='')
  br

  // slide navigation buttons
  input#prevSlide(type='button' value='Previous Slide')
  input#nextSlide(type='button' value='Next Slide')

  // history state display area
  #stateInfo4






  h3 浏览器兼容情况
  p ['Firefox', 'Chrome', 'IE 10', 'Safari 6', 'IOS Safari 5.1', 'Andoroid 4.3+']

  h3 API 介绍

  pre
    | history.pushState( data, title, [,url] )
    | data: 用以表示页面状态的字符串或对象
    | title: 浏览器为页面显示的标题栏字符串 (大多数浏览器不支持)
    | url: (可选)添加到历史记录栈中的新URL
    | 
    | 状态对象存储在本地磁盘,部分浏览器会限制data参数的大小.
    | Firefox将状态对象串行化(serialized)后的大小限制在640000字符.
    | 如果有可能超过此限制,你应该选用`sessionStorage`或`localStorage`
    | 
    | 提供的url参数将会替代浏览器地址栏的URL, 但浏览器不会向此地址发送请求.
    | 这可以允许用户将该URL保存为书签以备后来返回.这里URL可以是相对或绝对路径,
    | 不过路劲必须与当前URL在同一个域名下
    | 
    | pushState函数类似于在动态、基于Ajax应用中常用到的，使用#号(hash)控制页面上下文的方法：
    | widow.location = '#foo';
    | 不过，使用pushState函数比#号方法更灵活。
    | pushState能够使浏览器停留在当前页面或改变URL。#号方法只能将浏览器停留在相同的URL。
    | pushState能够将上下文信息保存在历史记录状态中。这一点尤其重要
    | 
    | HTML5 定义了历史记录API对应的新窗口时间popstate。浏览器窗口的活动
    | 历史记录的改变会触发该事件。历史记录条目的改变可以是由于用户单击了浏览器的
    | 后退或前进按钮，也可以是调用了history对象的back,forward,go方法。
    | window.addEventListener('popstate', func, false); 
    |  
    |  历史记录API的replaceState方法可用新的条目替代浏览器历史记录的当前条目。
    |  它的参数与pushState相同： data、title和一个可选的URL。
    |  replaceState方法在上下文改变或设置页面初始状态、需要更新浏览器历史记录状态时非常有用。
    |  当浏览器重新载入某个页面时，标题和URL保存在历史记录条目中。不过，并没有保存任何上文数据信息。
    |  为了将数据与标题、URL同时保存，你可以在页面载入时使用相同的标题、相同的URL以及额外需要
    |  保存于历史记录条目的状态数据来调用replaceState。
    |  
    |  
    |  HTML规范为浏览器指定了一系列的安全措施以防止滥用历史记录API（安全性）
    |  - 脚本调用pushState和replaceState时，使用的URL所处的域名必须与当前域名相同。
    |  - popstate事件只能引用存储于相同域名下历史记录中的状态对象以保护隐私。
    |  - pushState方法能够添加的浏览器历史记录栈条目是有限的。这是为了防止“泛洪”（flooding）用户浏览器。
    |  通过以上这些策略，能够最小化对历史记录API的恶意使用。
    |  **notes:**浏览器可能会施加限制并且清理历史记录栈以防止潜在的“泛洪”攻击。
    |  每种浏览器的限制条目数各不相同，不过清理的顺序都是按照先进先出（FIFO）方式进行的。
    |  
    |  Polyfill: https://github.com/browserstate/history.js

